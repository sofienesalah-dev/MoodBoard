{
  "swiftui-feature-prompt": {
    "prefix": "/prompt swiftui feature",
    "description": "Generate a complete prompt for a SwiftUI feature (prompt-driven, with automatic archiving).",
    "body": [
      "You are my SwiftUI development assistant.",
      "Your mission: generate ONLY the feature described below for an iOS 17+ project (Swift 6, SwiftUI), without modifying the rest of the existing code.",
      "",
      "# üß© CONTEXT",
      "This project illustrates a **Prompt-Driven Development** approach.",
      "Each feature must produce:",
      "- **clear and executable code** (Swift 6, SwiftUI),",
      "- **concise pedagogical documentation**,",
      "- and a **complete prompt archive** for traceability and sharing.",
      "",
      "---",
      "",
      "# üéØ OBJECTIVE",
      "${1:Briefly describe the feature objective (e.g., Introduce SwiftUI's declarative paradigm via @State)}",
      "",
      "---",
      "",
      "# üß± FILES TO CREATE OR MODIFY",
      "${2:1) MoodBoard/Sources/Views/<ViewName>.swift\\n2) Docs/<ViewName>.md}",
      "",
      "---",
      "",
      "# üìú TECHNICAL SPECIFICATIONS",
      "${3:Detail the expected behavior for each file: structure, interactions, UI, pedagogical comments, etc.}",
      "",
      "Add **pedagogical comments** in the code explaining conceptual parallels:",
      "- SwiftUI ‚Üî React (`@State` vs `useState`)",
      "- SwiftUI ‚Üî Jetpack Compose (`@State` vs `remember`)",
      "",
      "---",
      "",
      "# ‚úÖ ACCEPTANCE CRITERIA",
      "${4:- [ ] View compiles and runs in Xcode (iOS 17+)\\n- [ ] Previews work (light + dark mode)\\n- [ ] Expected behavior is respected\\n- [ ] Dark mode support verified\\n- [ ] Documentation is clear and readable}",
      "",
      "---",
      "",
      "# üé® CONVENTIONS",
      "- Target: iOS 17+",
      "- Language: Swift 6",
      "- Framework: SwiftUI",
      "- No external dependencies",
      "- Code: minimal, readable, commented (in English)",
      "- Documentation: concise (1 page max, in English)",
      "- **Navigation**: Add the feature to FeaturesListView",
      "- **‚ö†Ô∏è IMPORTANT**: NO Jira links or private URLs (public repository)",
      "- **üé® Dark Mode**: ALWAYS support dark mode (test with .preferredColorScheme(.dark))",
      "- **üóÑÔ∏è SwiftData**: For @Model classes, create `insertSamples(into: ModelContext)` helper to avoid type inference issues",
      "- **‚ö†Ô∏è Naming**: Avoid model name conflicts (rename existing structs if introducing @Model classes with same name)",
      "- **üß≠ Router**: Don't use `@Environment(Router.self)` unless Router is injected in app root (causes crash)",
      "- **üîß Components**: Use unique component names per feature to avoid redeclaration conflicts",
      "- **üß† MVVM**: Always separate business logic into ViewModels (NO logic in Views!)",
      "- **üíâ DI**: Inject dependencies (like ModelContext) into ViewModels, not direct in Views",
      "- **üìã Logging**: Use conditional compilation (#if DEBUG) for print statements, add TODO for production logging",
      "- **‚è±Ô∏è Lifecycle**: Use .task instead of .onAppear for async initialization (runs once per view lifecycle)",
      "",
      "---",
      "",
      "# üß≠ NAVIGATION INTEGRATION",
      "**IMPORTANT**: Add the new view to the navigation system:",
      "",
      "1. Open `MoodBoard/Sources/Views/FeaturesListView.swift`",
      "2. Add a new `NavigationLink` in the appropriate section",
      "3. Use the `FeatureRowView` component with:",
      "   - number: \"${5:02}\"",
      "   - title: \"${6:Feature Title}\"",
      "   - description: \"${7:Brief description}\"",
      "   - icon: \"${8:icon.name}\"",
      "   - color: .${9:blue}",
      "",
      "Example:",
      "```swift",
      "NavigationLink {",
      "    ${10:YourView}()",
      "} label: {",
      "    FeatureRowView(",
      "        number: \"${5}\",",
      "        title: \"${6}\",",
      "        description: \"${7}\",",
      "        icon: \"${8}\",",
      "        color: .${9}",
      "    )",
      "}",
      "```",
      "",
      "---",
      "",
      "# üì¶ AUTOMATIC PROMPT ARCHIVING",
      "Also create the following archive files under `.prompts/${11:feature-slug}/`:",
      "",
      "## A) `.prompts/${11}/PROMPT.md`",
      "- Contains **this complete prompt**, reproduced *verbatim*.",
      "- Add a header:",
      "  ```",
      "  # Prompt Archive ‚Äî ${6}",
      "  Date: ${12:2025-10-19}",
      "  Feature: ${11}",
      "  ```",
      "",
      "## B) `.prompts/${11}/feature-notes.md`",
      "- Summarize:",
      "  - **Objective**",
      "  - **Deliverables**",
      "  - **Acceptance Criteria**",
      "  - **PR Checklist**",
      "  - **Development Notes**",
      "- **‚ö†Ô∏è NO Jira links or ticket URLs** (public repo)",
      "",
      "## C) `.prompts/${11}/output/metadata.json`",
      "- Create metadata file with feature info",
      "- **DO NOT** duplicate source files (they are already in Sources/ and Docs/)",
      "",
      "---",
      "",
      "# üßæ EXPECTED OUTPUT",
      "Respond with:",
      "1Ô∏è‚É£ A clear summary of created files (tree structure)",
      "2Ô∏è‚É£ Complete content of each file in separate code blocks:",
      "   - Swift files",
      "   - `.md` documentation",
      "   - archives under `.prompts/...`",
      "3Ô∏è‚É£ A mini \"demo checklist\" to test the feature in Xcode",
      "4Ô∏è‚É£ A meta reminder in comment:",
      "   - `feature: ${11}`",
      "   - `date: ${12}`",
      "",
      "---",
      "",
      "# üöÄ FINAL INSTRUCTIONS",
      "Generate the above files, create their archives under `.prompts/${11}/`,",
      "add navigation integration in FeaturesListView,",
      "and ensure everything compiles and runs without external dependencies.",
      "",
      "---",
      "",
      "# üîÑ PR WORKFLOW",
      "After code generation:",
      "",
      "1. **Create Feature Branch**",
      "   ```bash",
      "   git checkout -b feature/${13:02-name}",
      "   ```",
      "",
      "2. **Commit Changes**",
      "   ```bash",
      "   git add -A",
      "   git commit -m \"feat(${11}): ${6}\"",
      "   git push origin feature/${13}",
      "   ```",
      "",
      "3. **Open Pull Request**",
      "   - Go to GitHub repository",
      "   - Click \"New Pull Request\"",
      "   - Add clear description with:",
      "     * Feature objective",
      "     * Changes made",
      "     * Testing steps",
      "",
      "4. **Use Copilot Reviewer**",
      "   - Comment on PR: `@copilot review`",
      "   - Wait for automated review",
      "   - Address feedback if any",
      "",
      "5. **Merge to Main**",
      "   - After approval and CI passes",
      "   - Squash and merge",
      "   - Delete feature branch"
    ]
  }
}
